#}
ss_excl_mat
#check it worked
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
ss_excl_mat <- array(0,dim=c(length(workers),2))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop')
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
}
ss_excl_mat
#final subjects after exclusions
length(unique(data$workerId)) #24 subjects
#check that numbers for each condition look reasonable
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
#assign variable names
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
n_aft_excl <- length(workers); n_aft_excl
n_excl <- n_bef_excl - n_aft_excl; n_excl
age <- as.numeric(data$age); mean(age,na.rm = TRUE)
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender)) #0.51
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
numTrials <- dim(data)[1]
matchCond <- as.factor(data$matchCond)
agentCond <- as.factor(data$agentCond)
condNum <- as.factor(data$condNum)
#create numeric version of condition
for(i in 1:length(agentCond)) {
if(condNum[i] == 1) {
if(agentCond[i] == 'future-you1') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
}
else if(condNum[i] == 2) {
if(agentCond[i] == 'future-you1') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'future-you2') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 3
}
data$condNum[i] <- 3
}
else if(condNum[i] == 3) {
if(agentCond[i] == 'future-you2') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-bill') {
data$agentCond_n[i] = 3
}
data$condNum[i] <- 2
}
}
condNum <- as.factor(data$condNum)
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
matchConds <- unique(matchCond)
label <- as.factor(data$label)
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers),7))
colnames(d_mat) <- c('worker', 'mainCond', 'agentCond', 'hits', 'false_alarms', 'd', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
#for each worker and agent condition, get average hits, false alarms, d-prime, and rt
#hits: proportion of true hits you said were hits (out of all true hits)
#false alarms: proportin of non hits you said were hits (out of all non hits)
#get rts for trials that were correct
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
length_h <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='y'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='n'])
h <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='y'])/length_h
fa <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n'])/length_fa
rt <- mean(rts[worker==workers[i] & agentCond_n==j & acc_use==1], na.rm=TRUE)
#correction for if h=1 or fa=0, by (Macmillan & Kaplan, 1985)
#if fa = 0, 0.5/𝑛; ifh= 1, (𝑛−0.5)/𝑛 , where n is the number of signal or noise trials
#see https://stats.stackexchange.com/questions/134779/d-prime-with-100-hit-rate-probability-and-0-false-alarm-probability
if(h==1) {
h <- (length_h-0.5)/length_h
}
if(fa==0) {
fa <- 0.05/length_fa
}
d.mat[counter,] <- c(workers[i],unique(condNum[worker==workers[i]]), j, h, fa, qnorm(h) - qnorm(fa), rt)
counter = counter + 1
}
}
d.mat
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 6
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e6_perception_alternatives/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
##================================================================================================================
##DATA PREP##
##================================================================================================================
#perform exclusions: attention, comprehension, and rts < 200 (this ends up performing both subject and trial)
#note, we exclude based on mean accuracy further below
data <- subset(data,(data$attentionMCQ=="0" & data$comp =="D"))
length(unique(data$workerId)) #1 subjects
data$rt[is.na(data$rt)] <- 0
#mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
#exclude subjects with lower than 55% average accuracy
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
condNum <- as.numeric(data$condNum)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0 #if na, just say it's accuracy of 0
perf_thresh <- 0.55
trial_thresh <- 0.5
ss_excl_mat <- array(0,dim=c(length(workers),4))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop', 'exclude', 'workerId')
ss_excl_mat <- as.data.frame(ss_excl_mat, stringsAsFactors=TRUE); ss_excl_mat
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
ss_excl_mat[i,4] <- workers[i]
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
data <- subset(data,data$workerId != workers[i])
ss_excl_mat[i,3] <- 1
}
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
}
#for(i in 1:length(workers)) {
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
#}
ss_excl_mat
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 6
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e6_perception_alternatives/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
##================================================================================================================
##DATA PREP##
##================================================================================================================
#perform exclusions: attention, comprehension, and rts < 200 (this ends up performing both subject and trial)
#note, we exclude based on mean accuracy further below
data <- subset(data,(data$attentionMCQ=="0" & data$comp =="D"))
length(unique(data$workerId)) #1 subjects
data$rt[is.na(data$rt)] <- 0
#mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
#exclude subjects with lower than 55% average accuracy
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
condNum <- as.numeric(data$condNum)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0 #if na, just say it's accuracy of 0
perf_thresh <- 0.55
trial_thresh <- 0.5
ss_excl_mat <- array(0,dim=c(length(workers),4))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop', 'exclude', 'workerId')
ss_excl_mat <- as.data.frame(ss_excl_mat, stringsAsFactors=FALSE); ss_excl_mat
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
ss_excl_mat[i,4] <- as.factor(workers[i])
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
data <- subset(data,data$workerId != workers[i])
ss_excl_mat[i,3] <- 1
}
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
}
#for(i in 1:length(workers)) {
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
#}
ss_excl_mat
workers[i]
as.factor(workers[i])
ss_excl_mat <- array('z',dim=c(length(workers),4))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop', 'exclude', 'workerId')
ss_excl_mat <- as.data.frame(ss_excl_mat, stringsAsFactors=FALSE); ss_excl_mat
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
ss_excl_mat[i,4] <- as.factor(workers[i])
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
data <- subset(data,data$workerId != workers[i])
ss_excl_mat[i,3] <- 1
}
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
}
ss_excl_mat
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 6
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e6_perception_alternatives/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
##================================================================================================================
##DATA PREP##
##================================================================================================================
#perform exclusions: attention, comprehension, and rts < 200 (this ends up performing both subject and trial)
#note, we exclude based on mean accuracy further below
data <- subset(data,(data$attentionMCQ=="0" & data$comp =="D"))
length(unique(data$workerId)) #1 subjects
data$rt[is.na(data$rt)] <- 0
#mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
#exclude subjects with lower than 55% average accuracy
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
condNum <- as.numeric(data$condNum)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0 #if na, just say it's accuracy of 0
perf_thresh <- 0.55
trial_thresh <- 0.5
ss_excl_mat <- array(0,dim=c(length(workers),4))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop', 'exclude', 'workerId')
ss_excl_mat <- as.data.frame(ss_excl_mat, stringsAsFactors=FALSE); ss_excl_mat
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
ss_excl_mat[i,4] <- as.factor(workers[i])
#if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
#  data <- subset(data,data$workerId != workers[i])
#  ss_excl_mat[i,3] <- 1
#}
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
}
#for(i in 1:length(workers)) {
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
#}
ss_excl_mat
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The limit of personal identity
#Experiment 6
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(ggsignif)) {install.packages("ggsignif"); require(ggsignif)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Documents/github/juliandefreitas/serial_self/e6_perception_alternatives/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
#check that we have equal numbers for each condition
table(data$image)
table(data$label)
table(data$agentCond)
table(data$matchCond)
table(data$condNum)
table(data$condNum)[1]/300
table(data$condNum)[2]/300
table(data$condNum)[3]/300
#number of workers before exclusions
n_bef_excl <- length(unique(data$workerId)); n_bef_excl
##================================================================================================================
##DATA PREP##
##================================================================================================================
#perform exclusions: attention, comprehension, and rts < 200 (this ends up performing both subject and trial)
#note, we exclude based on mean accuracy further below
data <- subset(data,(data$attentionMCQ=="0" & data$comp =="D"))
length(unique(data$workerId)) #1 subjects
data$rt[is.na(data$rt)] <- 0
#mark which trials had reasonable rts
for(i in 1:dim(data)[1]) {
if(data$rt[i] >= 100) {
data$badRt[i] = 0
}
else {
data$badRt[i] = 1
}
}
#exclude subjects with lower than 55% average accuracy
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
condNum <- as.numeric(data$condNum)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0 #if na, just say it's accuracy of 0
perf_thresh <- 0.55
trial_thresh <- 0.5
ss_excl_mat <- array(0,dim=c(length(workers),4))
colnames(ss_excl_mat) <- c('mean_acc', 'rt_err_prop', 'exclude', 'workerId')
ss_excl_mat <- as.data.frame(ss_excl_mat, stringsAsFactors=FALSE); ss_excl_mat
#if their accuracy < 55% or total bad RTs > 50% of trials, exclude them from dataset
for(i in 1:length(workers)) {
ss_excl_mat[i,1] <- c(mean(acc_use[worker==workers[i]])) #get accuracy for each worker
ss_excl_mat[i,2] <- sum(data$badRt[data$workerId == workers[i]])/length(data$rt[data$workerId == workers[i]])
ss_excl_mat[i,4] <- as.factor(workers[i])
if( (ss_excl_mat[i,1] < perf_thresh) | (ss_excl_mat[i,2] > trial_thresh) ) {
#  data <- subset(data,data$workerId != workers[i])
ss_excl_mat[i,3] <- 1
}
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
}
#for(i in 1:length(workers)) {
#ss_excl_mat[i,4] <- unique(condNum[worker==workers[i]])
#}
ss_excl_mat
workers[1]
data[data$worker=='A10JXOU89D5RXR']
labels(data)
data[data$workerId=='A10JXOU89D5RXR']
data$workerId
data[data$workerId=="A10JXOU89D5RXR"]
data$workerId[data$workerId=="A10JXOU89D5RXR"]
data[data$workerId=="A10JXOU89D5RXR"]
subset(data, data$workerId=="A10JXOU89D5RXR")
subset(data$condNum, data$workerId=="A10JXOU89D5RXR")
ss_excl_mat
workers[1]
workers[152]
subset(data$condNum, data$workerId=="AZNFEOC5WRHZP")
workers[148]
subset(data$condNum, data$workerId=="ASVHPLSI6MK6F")
workers[142]
subset(data$condNum, data$workerId=="AOTSROWZG1XS1")
