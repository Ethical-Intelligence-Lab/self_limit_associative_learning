data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger-john') {
data$agentCond_n[i] = 3
}
}
}
condNum <- as.factor(data$condNum)
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
matchConds <- unique(matchCond)
age <- as.numeric(data$age); mean(age,na.rm = TRUE) #32.10
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender)) #0.51
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers),7))
colnames(d_mat) <- c('worker', 'mainCond', 'agentCond', 'hits', 'false_alarms', 'd', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
#for each worker and agent condition, get average hits, false alarms, d-prime, and rt
#hits: proportion of true hits you said were hits (out of all true hits)
#false alarms: proportin of non hits you said were hits (out of all non hits)
#get rts for trials that were correct
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
length_h <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='y'])
length_fa <- length(acc_use[worker==workers[i] & agentCond_n==j & corrAns=='n'])
h <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='y'])/length_h
fa <- length(acc_use[worker==workers[i] & agentCond_n==j & ans=='y' & corrAns=='n'])/length_fa
rt <- mean(rts[worker==workers[i] & agentCond_n==j & acc_use==1], na.rm=TRUE)
#correction for if h=1 or fa=0, by (Macmillan & Kaplan, 1985)
#if fa = 0, 0.5/𝑛; ifh= 1, (𝑛−0.5)/𝑛 , where n is the number of signal or noise trials
#see https://stats.stackexchange.com/questions/134779/d-prime-with-100-hit-rate-probability-and-0-false-alarm-probability
if(h==1) {
h <- (length_h-0.5)/length_h
}
if(fa==0) {
fa <- 0.05/length_fa
}
d.mat[counter,] <- c(workers[i],unique(condNum[worker==workers[i]]), j, h, fa, qnorm(h) - qnorm(fa), rt)
counter = counter + 1
}
}
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity of personal identity
#Experiment 5
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Dropbox (Personal)/Research/Intuition/single_identity/e8_memory_association_oneFuture/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
length(unique(data$workerId)) #1 subjects
#check that we have equal numbers for each condition
table(data$label)
table(data$cond)
### exclude subjects with lower than 55% average accuracy
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
perf_thresh <- 0.40
cond <- as.factor(data$cond)
acc_mat <- array(0,dim=c(length(workers),1))
colnames(acc_mat) <- c('mean_acc')
for(i in 1:length(workers)) {
acc_mat[i,] <- c(mean(acc_use[worker==workers[i]]))
if(acc_mat[i,1] < perf_thresh) {
data <- subset(data,data$workerId != workers[i])
}
}
acc_mat
### get identity ratings for each subject
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
identity_bef <- data$identity_fetus
identity_aft <- data$identity_pvs
iden_mat <- array(0,dim=c(length(workers),5))
colnames(iden_mat) <- c('before', 'after','zeros','ltm_diff', 'total_perf')
for(i in 1:length(workers)) {
iden_mat[i,] <- c( mean(identity_bef[worker==workers[i]]), mean(identity_aft[worker==workers[i]]),0, 0, 0)
}
iden.mat <- as.data.frame(iden_mat, stringsAsFactors=FALSE); iden.mat
#assign variable names
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
numTrials <- dim(data)[1]
matchCond <- as.factor(data$matchCond)
agentCond <- as.factor(data$cond)
#create numeric version of condition
for(i in 1:length(agentCond)) {
if(agentCond[i] == 'you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'friend') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger') {
data$agentCond_n[i] = 3
}
}
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
age <- as.numeric(data$age); mean(age,na.rm = TRUE) #32.10
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender)) #0.51
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers), 4))
colnames(d_mat) <- c('worker', 'agentCond', 'acc', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
#for each worker and agent condition, get average hits, false alarms, d-prime, and rt
#hits: proportion of true hits you said were hits (out of all true hits)
#false alarms: proportin of non hits you said were hits (out of all non hits)
#get rts for trials that were correct
corr_answers <- c('original', 'copy', 'stranger')
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
mean_acc <- mean(acc_use[worker==workers[i] & agentCond_n==j])
rt <- mean(rts[worker==workers[i] & agentCond_n==j], na.rm=TRUE)
d.mat[counter,] <- c(workers[i], j, mean_acc, rt)
counter = counter + 1
}
}
d.mat
table(data$cond)
labels(data)
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity of personal identity
#Experiment 5
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Dropbox (Personal)/Research/Intuition/single_identity/e8_memory_association_oneFuture/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
length(unique(data$workerId)) #1 subjects
#check that we have equal numbers for each condition
table(data$label)
table(data$cond)
labels(data)
table(data$sekfCond)
table(data$selfCond)
data$condName
data$cond
table(data$cond)
data$agentCond
data$preference
#Julian De Freitas, 2019
#Analysis script for De Freitas, Rips, & Alvarez - The capacity of personal identity
#Experiment 5
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(jsonlite)) {install.packages("jsonlite"); require(jsonlite)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if (!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
##================================================================================================================
##IMPORT DATA##
##================================================================================================================
## set directory to data folder
dir <- setwd("/Users/julian/Dropbox (Personal)/Research/Intuition/single_identity/pilots/e8_memory_association_self/data")
datalist = list()
#import data using jsonlite [automate this, by defining list of data frames]
files <- list.files(pattern=('*txt'))
for (i in 1:length(files)) {
curData <- fromJSON(files[i], simplifyDataFrame = TRUE)
datalist[[i]] <- curData$trialStruct
}
data = do.call(rbind, datalist)
head(data)
dim(data)
length(unique(data$workerId)) #1 subjects
#check that we have equal numbers for each condition
table(data$label)
table(data$cond)
##================================================================================================================
##DATA PREP##
##================================================================================================================
### perform exclusions: attention, comprehension, and rts < 200 (this ends up performing both subject and trial)
### note, we exclude based on mean accuracy further below
### note, data$comp_mental_content actually refers to comp_number_copies
data <- subset(data,(data$attentionMCQ=="0" & data$comp=="B" &
data$comp2=="C" & data$rt>=100))
length(unique(data$workerId)) #1 subjects
dim(data)
### exclude subjects with lower than 55% average accuracy
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
perf_thresh <- 0.40
cond <- as.factor(data$cond)
acc_mat <- array(0,dim=c(length(workers),1))
colnames(acc_mat) <- c('mean_acc')
for(i in 1:length(workers)) {
acc_mat[i,] <- c(mean(acc_use[worker==workers[i]]))
if(acc_mat[i,1] < perf_thresh) {
data <- subset(data,data$workerId != workers[i])
}
}
acc_mat
### get identity ratings for each subject
worker <- as.factor(data$workerId)
workers <- as.factor(unique(worker))
identity_bef <- data$identity_fetus
identity_aft <- data$identity_pvs
iden_mat <- array(0,dim=c(length(workers),5))
colnames(iden_mat) <- c('before', 'after','zeros','ltm_diff', 'total_perf')
for(i in 1:length(workers)) {
iden_mat[i,] <- c( mean(identity_bef[worker==workers[i]]), mean(identity_aft[worker==workers[i]]),0, 0, 0)
}
iden.mat <- as.data.frame(iden_mat, stringsAsFactors=FALSE); iden.mat
#assign variable names
acc <- as.numeric(data$acc)
acc_use <- acc
acc_use[is.na(acc_use)] <- 0
numTrials <- dim(data)[1]
matchCond <- as.factor(data$matchCond)
agentCond <- as.factor(data$cond)
#create numeric version of condition
for(i in 1:length(agentCond)) {
if(agentCond[i] == 'you') {
data$agentCond_n[i] = 1
}
else if(agentCond[i] == 'friend') {
data$agentCond_n[i] = 2
}
else if(agentCond[i] == 'stranger') {
data$agentCond_n[i] = 3
}
}
agentCond_n <- as.factor(data$agentCond_n)
ans <- as.factor(data$ans)
corrAns <- as.factor(data$corrAns)
rts <- log(as.numeric(data$rt))
agentConds_n <- as.factor(unique(agentCond_n))
age <- as.numeric(data$age); mean(age,na.rm = TRUE) #32.10
gender <- as.factor(data$sex); table(gender)[1]/sum(table(gender)) #0.51
#create matrix for collecting d prime-relevant values, and rts
d_mat <- array(0,dim=c(3*length(workers), 4))
colnames(d_mat) <- c('worker', 'agentCond', 'acc', 'rt')
d.mat <- as.data.frame(d_mat, stringsAsFactors=FALSE); d.mat
#for each worker and agent condition, get average hits, false alarms, d-prime, and rt
#hits: proportion of true hits you said were hits (out of all true hits)
#false alarms: proportin of non hits you said were hits (out of all non hits)
#get rts for trials that were correct
corr_answers <- c('original', 'copy', 'stranger')
counter <- 1
for(i in 1:length(workers)) {
for(j in 1:length(agentConds_n)) {
mean_acc <- mean(acc_use[worker==workers[i] & agentCond_n==j])
rt <- mean(rts[worker==workers[i] & agentCond_n==j], na.rm=TRUE)
d.mat[counter,] <- c(workers[i], j, mean_acc, rt)
counter = counter + 1
}
}
for(i in 1:length(workers)) {
iden.mat[i,4] <- d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1] - d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2]
iden.mat[i,5] <- d.mat$acc[d.mat$worker==i & d.mat$agentCond == 1] + d.mat$acc[d.mat$worker==i & d.mat$agentCond == 2] + d.mat$acc[d.mat$worker==i & d.mat$agentCond == 3]
}
#subset d.mat by response
d.mat_o <- subset(d.mat,(d.mat$after==1))
d.mat_c <- subset(d.mat,(d.mat$after==2))
d.mat_b <- subset(d.mat,(d.mat$after==4))
#sort identity mat by original - copy, for plotting
iden_ordered <- iden.mat[order(-iden.mat$ltm_diff),]
iden_ordered$counter <- c(1:length(workers))
iden_ordered
#sort identity mat by original - copy, for plotting
iden_ordered_perf <- iden.mat[order(-iden.mat$total_perf),]
iden_ordered_perf$counter <- c(1:length(workers))
iden_ordered_perf
#subset data based on whether participants say 1 (original) or 4 (both)
iden_ordered_original <- subset(iden_ordered,(iden_ordered$after == 1))
iden_ordered_copy <- subset(iden_ordered,(iden_ordered$after == 2))
iden_ordered_both <- subset(iden_ordered,(iden_ordered$after == 4))
#subset data based on whether participants say 1 (original) or 4 (both)
iden_ordered_perf_original <- subset(iden_ordered_perf,(iden_ordered_perf$after == 1))
iden_ordered_perf_copy <- subset(iden_ordered_perf,(iden_ordered_perf$after == 2))
iden_ordered_perf_both <- subset(iden_ordered_perf,(iden_ordered_perf$after == 4))
##================================================================================================================
##ANALYSIS##
##================================================================================================================
####### GROUP DIFFERENCES
## all subjects
## means
mean(d.mat$acc[d.mat$agentCond==1])
sd(d.mat$acc[d.mat$agentCond==1])
mean(d.mat$acc[d.mat$agentCond==2])
sd(d.mat$acc[d.mat$agentCond==2])
mean(d.mat$acc[d.mat$agentCond==3])
sd(d.mat$acc[d.mat$agentCond==3])
att_1 <- t.test(d.mat$acc[d.mat$agentCond==1 | d.mat$agentCond==2] ~ d.mat$agentCond[d.mat$agentCond==1 | d.mat$agentCond==2], var.equal=TRUE, paired=TRUE); att_1
att_2 <- t.test(d.mat$acc[d.mat$agentCond==1 | d.mat$agentCond==3] ~ d.mat$agentCond[d.mat$agentCond==1 | d.mat$agentCond==3], var.equal=TRUE, paired=TRUE); att_2
att_3 <- t.test(d.mat$acc[d.mat$agentCond==2 | d.mat$agentCond==3] ~ d.mat$agentCond[d.mat$agentCond==2 | d.mat$agentCond==3], var.equal=TRUE, paired=TRUE); att_3
tes(as.numeric(att_1[1]), length(workers), length(workers)) #cohen's d
tes(as.numeric(att_2[1]), length(workers), length(workers)) #cohen's d
tes(as.numeric(att_3[1]), length(workers), length(workers)) #cohen's d
## chose original
att_1 <- t.test(d.mat_o$d[d.mat_o$agentCond==1 | d.mat_o$agentCond==2] ~ d.mat_o$agentCond[d.mat_o$agentCond==1 | d.mat_o$agentCond==2], var.equal=TRUE, paired=TRUE); att_1
att_2 <- t.test(d.mat_o$d[d.mat_o$agentCond==1 | d.mat_o$agentCond==3] ~ d.mat_o$agentCond[d.mat_o$agentCond==1 | d.mat_o$agentCond==3], var.equal=TRUE, paired=TRUE); att_2
att_3 <- t.test(d.mat_o$d[d.mat_o$agentCond==2 | d.mat_o$agentCond==3] ~ d.mat_o$agentCond[d.mat_o$agentCond==2 | d.mat_o$agentCond==3], var.equal=TRUE, paired=TRUE); att_3
# chose copy
att_1 <- t.test(d.mat_c$d[d.mat_c$agentCond==1 | d.mat_c$agentCond==2] ~ d.mat_c$agentCond[d.mat_c$agentCond==1 | d.mat_c$agentCond==2], var.equal=TRUE, paired=TRUE); att_1
att_2 <- t.test(d.mat_c$d[d.mat_c$agentCond==1 | d.mat_c$agentCond==3] ~ d.mat_c$agentCond[d.mat_c$agentCond==1 | d.mat_c$agentCond==3], var.equal=TRUE, paired=TRUE); att_2
att_3 <- t.test(d.mat_c$d[d.mat_c$agentCond==2 | d.mat_c$agentCond==3] ~ d.mat_c$agentCond[d.mat_c$agentCond==2 | d.mat_c$agentCond==3], var.equal=TRUE, paired=TRUE); att_3
# chose both
att_1 <- t.test(d.mat_b$d[d.mat_b$agentCond==1 | d.mat_b$agentCond==2] ~ d.mat_b$agentCond[d.mat_b$agentCond==1 | d.mat_b$agentCond==2], var.equal=TRUE, paired=TRUE); att_1
att_2 <- t.test(d.mat_b$d[d.mat_b$agentCond==1 | d.mat_b$agentCond==3] ~ d.mat_b$agentCond[d.mat_b$agentCond==1 | d.mat_b$agentCond==3], var.equal=TRUE, paired=TRUE); att_2
att_3 <- t.test(d.mat_b$d[d.mat_b$agentCond==2 | d.mat_b$agentCond==3] ~ d.mat_b$agentCond[d.mat_b$agentCond==2 | d.mat_b$agentCond==3], var.equal=TRUE, paired=TRUE); att_3
####### GROUP DIFFERENCES, BY RESPONSE: ORIGINAL - COPY
mean(iden_ordered$att_diff[iden_ordered$after==1])
sd(iden_ordered$att_diff[iden_ordered$after==1])
mean(iden_ordered$att_diff[iden_ordered$after==2])
sd(iden_ordered$att_diff[iden_ordered$after==2])
mean(iden_ordered$att_diff[iden_ordered$after==4])
sd(iden_ordered$att_diff[iden_ordered$after==4])
att_1 <- t.test(iden_ordered$att_diff[iden_ordered$aft==1 | iden_ordered$aft==2] ~ iden_ordered$aft[iden_ordered$aft==1 | iden_ordered$aft==2], var.equal=TRUE, paired=FALSE); att_1
att_2 <- t.test(iden_ordered$att_diff[iden_ordered$aft==1 | iden_ordered$aft==4] ~ iden_ordered$aft[iden_ordered$aft==1 | iden_ordered$aft==4], var.equal=TRUE, paired=FALSE); att_2
att_3 <- t.test(iden_ordered$att_diff[iden_ordered$aft==2 | iden_ordered$aft==4] ~ iden_ordered$aft[iden_ordered$aft==2 | iden_ordered$aft==4], var.equal=TRUE, paired=FALSE); att_3
####### GROUP DIFFERENCES, BY RESPONSE: OVERALL PERFORMANCE
attmean(iden_ordered$total_perf[iden_ordered$aft==1])
sd(iden_ordered$total_perf[iden_ordered$aft==1])
mean(iden_ordered$total_perf[iden_ordered$aft==2])
sd(iden_ordered$total_perf[iden_ordered$aft==2])
mean(iden_ordered$total_perf[iden_ordered$aft==4])
sd(iden_ordered$total_perf[iden_ordered$aft==4])
att_1 <- t.test(iden_ordered$total_perf[iden_ordered$aft==1 | iden_ordered$aft==2] ~ iden_ordered$aft[iden_ordered$aft==1 | iden_ordered$aft==2], var.equal=TRUE, paired=FALSE); att_1
att_2 <- t.test(iden_ordered$total_perf[iden_ordered$aft==1 | iden_ordered$aft==4] ~ iden_ordered$aft[iden_ordered$aft==1 | iden_ordered$aft==4], var.equal=TRUE, paired=FALSE); att_2
att_3 <- t.test(iden_ordered$total_perf[iden_ordered$aft==2 | iden_ordered$aft==4] ~ iden_ordered$aft[iden_ordered$aft==2 | iden_ordered$aft==4], var.equal=TRUE, paired=FALSE); att_3
### attention: rts (no effect)
mod <- aov(d.mat$rt ~ d.mat$agentCond)
summary(mod)
mean(d.mat$rt[d.mat$agentCond==1])
sd(d.mat$rt[d.mat$agentCond==1])
mean(d.mat$rt[d.mat$agentCond==2])
sd(d.mat$rt[d.mat$agentCond==2])
mean(d.mat$rt[d.mat$agentCond==3])
sd(d.mat$rt[d.mat$agentCond==3])
rt_1 <- t.test(d.mat$rt[d.mat$agentCond==1 | d.mat$agentCond==2] ~ d.mat$agentCond[d.mat$agentCond==1 | d.mat$agentCond==2], var.equal=TRUE, paired=TRUE); rt_1
rt_2 <- t.test(d.mat$rt[d.mat$agentCond==1 | d.mat$agentCond==3] ~ d.mat$agentCond[d.mat$agentCond==1 | d.mat$agentCond==3], var.equal=TRUE, paired=TRUE); rt_2
rt_3 <- t.test(d.mat$rt[d.mat$agentCond==2 | d.mat$agentCond==3] ~ d.mat$agentCond[d.mat$agentCond==2 | d.mat$agentCond==3], var.equal=TRUE, paired=TRUE); rt_3
tes(as.numeric(rt_1[1]), length(workers), length(workers)) #cohen's d
tes(as.numeric(rt_2[1]), length(workers), length(workers)) #cohen's d
tes(as.numeric(rt_3[1]), length(workers), length(workers)) #cohen's d
#t-test on subsets
t.test(iden_ordered$att_diff[iden_ordered$after == 1 | iden_ordered$after == 4], iden_ordered$after[iden_ordered$after == 1 | iden_ordered$after == 4], var.equal=TRUE, paired=TRUE)
##================================================================================================================
##PLOT##
##================================================================================================================
condNames <- c('You', 'Friend', 'Stranger')
#make d mat for plotting: condition 1
d_mat_plot <- array(0,dim=c(3, 5))
colnames(d_mat_plot) <- c('cond','mean','sd','n','sem')
for(i in 1:length(unique(agentCond_n))) {
d_mat_plot[i, ] <- c(i, mean(d.mat$acc[d.mat$agentCond == i]), sd(d.mat$acc[d.mat$agentCond == i]), length(d.mat$acc[d.mat$agentCond == i]), 0)
d_mat_plot[i, 5] <- d_mat_plot[i,3]/sqrt(d_mat_plot[i,4])
}
d_mat_plot
d.plot <- as.data.frame(d_mat_plot, stringsAsFactors=FALSE); d.plot
###### GROUPED PLOTS
### dprime, group
title <- c('Performance for One Self')
p1<-ggplot(d.plot,aes(x=factor(cond),y=mean,fill=factor(cond))) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(0, 1))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Number of Selves")+ylab("Mean")
#individual subjects
p3.1<-ggplot(iden_ordered,aes(x=factor(counter),y=ltm_diff)) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar",fill="darkgray")+
theme_bw()+coord_cartesian(ylim=c(-1, 1))+
theme_classic()
p3.1+scale_x_discrete(breaks = 1:length(workers), labels=iden_ordered$counter)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(text = element_text(size=32),
axis.text.x = element_text(angle = 45, hjust=1,vjust=0.8, color="black"),
axis.text.y = element_text(color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))+
xlab("Participant")+ylab("d' Difference (Original-Copy)")+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+
scale_fill_manual(values = c("gray"))
quartz()
title <- c('Performance for One Self')
p1<-ggplot(d.plot,aes(x=factor(cond),y=mean,fill=factor(cond))) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(0, 1))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Number of Selves")+ylab("Mean")
quartz()
title <- c('Performance levels')
p1<-ggplot(d.plot,aes(x=factor(cond),y=mean,fill=factor(cond))) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(0, 1))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Number of Selves")+ylab("Mean")
p3.1<-ggplot(iden_ordered,aes(x=factor(counter),y=ltm_diff)) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar",fill="darkgray")+
theme_bw()+coord_cartesian(ylim=c(-1, 1))+
theme_classic()
p3.1+scale_x_discrete(breaks = 1:length(workers), labels=iden_ordered$counter)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(text = element_text(size=32),
axis.text.x = element_text(angle = 45, hjust=1,vjust=0.8, color="black"),
axis.text.y = element_text(color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))+
xlab("Participant")+ylab("d' Difference (Original-Copy)")+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+
scale_fill_manual(values = c("gray"))
quartz()
p3.1<-ggplot(iden_ordered,aes(x=factor(counter),y=ltm_diff)) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar",fill="darkgray")+
theme_bw()+coord_cartesian(ylim=c(-1, 1))+
theme_classic()
p3.1+scale_x_discrete(breaks = 1:length(workers), labels=iden_ordered$counter)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(text = element_text(size=32),
axis.text.x = element_text(angle = 45, hjust=1,vjust=0.8, color="black"),
axis.text.y = element_text(color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"))+
xlab("Participant")+ylab("d' Difference (Self-Friend)")+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+
scale_fill_manual(values = c("gray"))
att_1 <- t.test(d.mat$acc[d.mat$agentCond==1 | d.mat$agentCond==2] ~ d.mat$agentCond[d.mat$agentCond==1 | d.mat$agentCond==2], var.equal=TRUE, paired=TRUE); att_1
att_2 <- t.test(d.mat$acc[d.mat$agentCond==1 | d.mat$agentCond==3] ~ d.mat$agentCond[d.mat$agentCond==1 | d.mat$agentCond==3], var.equal=TRUE, paired=TRUE); att_2
att_3 <- t.test(d.mat$acc[d.mat$agentCond==2 | d.mat$agentCond==3] ~ d.mat$agentCond[d.mat$agentCond==2 | d.mat$agentCond==3], var.equal=TRUE, paired=TRUE); att_3
